name: $(Build.BuildId)

trigger:
 branches:
   include:
     - master/Chapter-7-(LookupValue-Extension)-refactored-and-completed

variables:
- group: 'PipelineVariables'

pool: default

steps:
- checkout: self
  clean: true 

- task: ALOpsDockerCreate@1
  displayName: 'ALOPS - Create Docker Image' # It will reuse the image if already exists, or build one if it doesn't.
  inputs:
    artifactversion: '18'
    artifactcountry: 'w1'

- task: ALOpsDockerStart@1
  displayName: 'ALOPS - Start Docker Container' # No need to provide any details - it will get the details from previous step

- task: ALOpsDockerWait@1
  displayName: 'ALOPS - Wait for Docker Container to start'
  inputs:
    search_string: 'Ready for connections!'

- task: ALOpsLicenseImport@1
  displayName: 'ALOPS - License Import'
  inputs:
    usedocker: true
    license_path: '$(LuxBeheerBcDevLicense)'

- task: ALOpsAppCompiler@1
  displayName: 'ALOPS - Compile Extension: App'
  inputs:
    usedocker: true
    nav_app_version: '1.0.[yyyyWW].*'
    targetproject: 'Chapter 8 (LookupValue Extension) - refactored and completed/app.json'
    app_file_suffix: '_APP'                                 # A trick to uniquely identify the APP (from the TEST-app)

- task: ALOpsAppPublish@1
  displayName: 'ALOPS - Publish Extension'
  inputs:
    usedocker: true
    nav_artifact_app_filter: '*.app'
    skip_verification: true

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

- task: ALOpsAppTest@1
  displayName: 'ALOPS - Run TestSuite'
  inputs:
    usedocker: true
    testfilter: '81000..81099'
    failed_test_action: 'Ignore'
  continueOnError: true   

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TestResults.xml'
  inputs:
    testResultsFormat: XUnit
    testResultsFiles: '**/TestResults.xml'
    failTaskOnFailedTests: true
    testRunTitle: 'BC Test Results: $(Build.BuildId)'

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

- task: ALOpsDockerRemove@1
  displayName: 'ALOPS - Remove Docker Container'
  enabled: true
  condition: always()